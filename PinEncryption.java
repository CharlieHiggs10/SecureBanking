package AccountProject;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class PinEncryption {

    // pin = seed #

    // This function encrypts the input string using a pseudo-random shift based on the provided seed (Users inputted PIN #)
    public static String E (String clear, int pin) {

        String cipher = "";
        final int alphabet_length = '~' - ' ' + 1;   // 'space' is start of the unicode numbers, '~' is the end of the
                                                     // unicode after the alphabet we want to use.

        final char base = ' ';                       // base is the starting character

        SecureRandom r = null;

        try {
            r = SecureRandom.
                    getInstance("SHA1PRNG");            // Gets a random number from the pseudo-random number generator
                                                                 // based on the SHA-1 hash algorithm.
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);                      // If the algorithm is no found, NoSuchAlgorithmException is thrown
        }                                                       // which is then converted into RuntimeException by rethrowing it,
                                                                // which in turn stops the execution and signals an error

        r.setSeed(pin);                                         // Sets the seed as the user inputted pin

        // Encrypt each character in clear
        for (int i = 0; i < clear.length(); i++) {

            char clear_ch = clear.charAt(i);                    // This gets the letters in the word that is being encrypted

            int clear_pos = clear_ch - base;                    // This gets the position of the character in Unicode

            int shift = r.nextInt();                            // This is the random number for the shift generated by the CSPRNG

            int cipher_pos =                                     // finds the new position of the character when the random shift is added.
                    Math.floorMod(clear_pos + shift, alphabet_length);


            char cipher_ch = (char) (cipher_pos + base);

            cipher = cipher + cipher_ch;                        // Appends the new encrypted character to the sentence of encrypted characters

        }
        return cipher;

    } // E Function
}
